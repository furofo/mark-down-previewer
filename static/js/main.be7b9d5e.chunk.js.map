{"version":3,"sources":["index.js"],"names":["placeholderText","store","createStore","state","input","previewSwitch","editorSwitch","action","type","marked","setOptions","breaks","MarkDownContainer","props","updateMessage","bind","previewExpand","editorExpand","event","this","loginAction","target","value","$","hide","previewToggle","show","animate","width","editorToggle","rows","css","document","getElementById","innerHTML","click","className","id","href","onChange","React","Component","Container","connect","dispatch","message","ActualMarkdown","ReactDom","render"],"mappings":"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","file":"static/js/main.be7b9d5e.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport { render } from 'react-dom'\r\nimport './style.css';\r\nimport $ from \"jquery\";\r\nimport marked from 'marked';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux';\r\n\r\n//global variables\r\n\r\nlet placeholderText =  `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n  \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n  \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`;\r\n\r\n//redux logic\r\n\r\nconst reducer =  function (state = {input: placeholderText, previewSwitch: true, editorSwitch: true,}, action)  {\r\n    if(action.type == \"message\"){\r\n        return {\r\n            input: action.input,\r\n            previewSwitch: state.previewSwitch,  // simple logic here if type is message change message and return everything else unchanged\r\n            editorSwitch: state.editorSwitch,\r\n        }\r\n    }\r\n    else if (action.type == \"previewToggle\") {\r\n        return {\r\n            input: state.input,\r\n            previewSwitch: !state.previewSwitch,\r\n            editorSwitch: state.editorSwitch, // these two just siwtch boolean value for either previe or editor switch which changes the menu sizes\r\n        }\r\n    }\r\n    else if (action.type == \"editorToggle\") {\r\n        return {\r\n            input: state.input,\r\n            previewSwitch: state.previewSwitch,\r\n            editorSwitch: !state.editorSwitch,\r\n        }\r\n    }\r\n    else {\r\n    return state;\r\n    }\r\n  }\r\nlet store = createStore(reducer);\r\n\r\n//these are action creators\r\nconst loginAction = function (message) {\r\n    return {\r\n      type: 'message',\r\n      input: message,\r\n    }\r\n  };\r\n  const previewToggle = () => {\r\n    return {\r\n      type: 'previewToggle',\r\n     \r\n    }\r\n  };\r\n  const editorToggle = () => {\r\n    return {\r\n      type: 'editorToggle',\r\n    }\r\n  };\r\n    \r\n//mark up special flags to pass optional test\r\nmarked.setOptions({\r\n    breaks: true\r\n});\r\nclass MarkDownContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateMessage = this.updateMessage.bind(this); // this binds this XD so these refer to mark down conatier rather than window object\r\n        this.previewExpand = this.previewExpand.bind(this);\r\n        this.editorExpand = this.editorExpand.bind(this);\r\n\r\n    }\r\n    updateMessage(event) {\r\n        this.props.loginAction(event.target.value) // uses props it gets from Redux that represent redux state which are defined in my react-redux section\r\n    }\r\n\r\n    previewExpand(){ // logic for hiding and expanding editor and preview\r\n        if(this.props.previewSwitch){\r\n            $(\".editor-container\").hide(\"slow\", function(){});\r\n            this.props.previewToggle();\r\n        }\r\n        else {\r\n            $(\".editor-container\").show(\"slow\", function(){});\r\n            this.props.previewToggle();\r\n        }\r\n    }\r\n    editorExpand(){\r\n        if(this.props.editorSwitch){\r\n            $(\".preview-container\").hide(\"slow\", function(){});\r\n            $(\".editor-container\").animate({\r\n                width: \"80%\",\r\n            }, 1000);\r\n            this.props.editorToggle();\r\n            $(\"#editor\").animate({\r\n                rows: \"40\"\r\n            }, 1000);\r\n        }\r\n        else {\r\n            $(\".preview-container\").show(\"slow\", function(){$(\".editor-container\").css(\"width\", \"70%\");});\r\n            $(\".editor-container\").animate({\r\n                width: \"70%\",\r\n            }, 1000);\r\n            //$(\"#editor\").attr(\"rows\", \"15\");\r\n            $(\"#editor\").animate({\r\n                rows: \"15\"\r\n            }, 1000);\r\n            this.props.editorToggle();\r\n        }\r\n    }\r\n    componentDidMount() { // this is called after render so makes sure everything is loaded before this is run do this way so i can wait for props to load since it reads props \r\n        document.getElementById('preview').innerHTML = marked(this.props.input); // and otherwise would cause errors\r\n        $(\"#preview-expander\").click(this.previewExpand);\r\n        $(\"#editor-expander\").click(this.editorExpand); \r\n    }\r\n\r\n    componentDidUpdate() {\r\n        document.getElementById('preview').innerHTML = marked(this.props.input); // anytime document updates this gets called so constantly changes input based on this\r\n    }\r\n    render() {\r\n        return(\r\n        <div>\r\n        <div className = \"center\">\r\n            <div className = \"editor-container\">\r\n                <div id = \"editor-heading\"> \r\n                    <i className=\"fas fa-fire\">  Editor</i>\r\n                    <a href =\"#\" id = \"editor-expander\">  <i className=\"fas fa-arrows-alt\"></i> </a>\r\n                </div>\r\n                <textarea onChange = {this.updateMessage} id = \"editor\" rows = \"15\">\r\n                    {this.props.input}\r\n                </textarea>\r\n            </div>\r\n        </div>\r\n        <div className = \"preview-container\">\r\n        <div className = \"center\">\r\n        <div id = \"preview-header\">     \r\n                <i className=\"fas fa-fire\">  Preview</i>\r\n                <a href = \"#\" id = \"preview-expander\"><i className=\"fas fa-arrows-alt\"></i></a>\r\n                </div> \r\n        </div>\r\n        <div className = \"center\">\r\n            <div id = \"preview\">\r\n            </div>\r\n       </div>\r\n       </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n//React Redux where I use both of these together\r\n\r\nconst mapStateToProps = (state) => { // this maps my redux state to props that react can use directly so use these props in react to get redux state\r\n    return {\r\n      input: state.input,\r\n      previewSwitch: state.previewSwitch,\r\n      editorSwitch: state.editorSwitch,\r\n    }\r\n  };\r\n\r\nconst mapDispatchToProps = (dispatch) => { // since dispatch actions can change redux state this likewise gives props to react but this time for these dispatch actions\r\nreturn {                                    // using these lets me change redux state\r\n    loginAction: (message) => {\r\n        dispatch(loginAction(message));\r\n    },\r\n    previewToggle: () => {\r\n        dispatch(previewToggle());\r\n    },\r\n    editorToggle: () => {\r\n        dispatch(editorToggle());\r\n    }\r\n}\r\n}\r\nconst Container = connect(mapStateToProps,mapDispatchToProps)(MarkDownContainer)\r\nclass ActualMarkdown extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render() {\r\n       return(\r\n           <Provider store = {store}>\r\n               <Container />\r\n           </Provider>\r\n       );\r\n    }\r\n}\r\nReactDom.render(<ActualMarkdown />, document.getElementById('root'));"],"sourceRoot":""}